
import ultralytics

import supervision as sv

import cv2

import random

from ultralytics import YOLO

from roboflow import Roboflow

from matplotlib import pyplot as plt

import albumentations as A

import numpy as np

import torch

import os

from sklearn.model_selection import train_test_split

from tqdm import tqdm

import pyttsx3

from itertools import groupby

import argostranslate.package

import argostranslate.translate








'''
rf = Roboflow(api_key="rnDx69TSkP9qRvzAtngq")
project = rf.workspace("mkjahf").project("kjldovpnqbd")
version = project.version(18)
dataset = version.download("yolov8")
'''             
                

'''
global numaug
numaug = 3

imagefold = r'L:\Python Data\PoseTesting\PoseTesting\kjldovpnqbd-18\train\images'
antfold = r'L:\Python Data\PoseTesting\PoseTesting\kjldovpnqbd-18\train\labels'
outfold = r'L:\Python Data\PoseTesting\PoseTesting\kjldovpnqbd18out'

transform = A.Compose([
    A.GaussNoise(p=0.3),
    A.RandomBrightnessContrast(p=0.3),
    A.HueSaturationValue (p= 0.3),
    A.GaussianBlur(p=0.3)
], bbox_params=A.BboxParams(format='yolo', label_fields=['classlabels'], min_visibility=0.2),
   keypoint_params=A.KeypointParams(format='xy', remove_invisible=False))
   
  

def transformdata(image_files, imagefold, antfold, outfold):
  numaug
  
  imgdir = os.path.join(outfold, 'images')
  os.makedirs(imgdir, exist_ok=True)
  
  labeldir = os.path.join(outfold, 'labels')
  os.makedirs(labeldir, exist_ok=True)
  
  for imgname in tqdm(image_files): 
       imgpath = os.path.join(imagefold, imgname)
       antpath = os.path.join(antfold, os.path.splitext(imgname)[0] + '.txt') 
       
       image = cv2.imread(imgpath)
       bboxes = []
       classlabels = []
       keypoints = []
       with open(antpath, 'r') as f:
           for line in f:
                 data = list(map(float, line.strip().split()))
                 if len(data) == 68: 
                      class_id = int (data[0])
                      classlabels.append(class_id)
                      bbox = data[1:5]
                      bboxes.append(bbox)
                      keypoint_data = data[5:]
                      for i in range(0, len(keypoint_data), 3):
                           kdata = [keypoint_data[i], keypoint_data[i+1], keypoint_data[i+2]]  
                           keypoints.append (kdata)   
                 else:
                   print("invalid format")
        
       for i in range(numaug):
          augmented = transform(image=image, classlabels=classlabels, bboxes=bboxes, keypoints=keypoints)
          image = augmented['image']
          classlabels = augmented['classlabels']
          bboxes = augmented['bboxes']
          keypoints = augmented['keypoints']
      
          augimgpath = os.path.join(imgdir, f"{os.path.splitext(imgname)[0]}_aug_{i}.jpg")
          cv2.imwrite( augimgpath, image)
      
          auglabpath = os.path.join(labeldir, f"{os.path.splitext(imgname)[0]}_aug_{i}.txt")
          with open(auglabpath, 'w') as f:
               for label,bbox in zip(classlabels, bboxes):
                    x, y, width, height = bbox
                    f.write(f"{label} {x} {y} {width} {height} ")
               for kp in keypoints:
                     for val in kp:
                       f.write(f"{val} ")
  
            
def augment(imagefold, antfold, outfold):  
  files = []
  for f in os.listdir(imagefold):
    files.append(f)
      
  train, test = train_test_split(files, test_size=0.2, random_state=0)
  train, val = train_test_split(train, test_size=0.125, random_state=0)
    
  trainout = os.path.join(outfold,'train')
  os.makedirs(trainout, exist_ok=True)
  print("Train Images")
  transformdata(train, imagefold, antfold, trainout)

  valout = os.path.join(outfold, 'val')
  os.makedirs(valout, exist_ok=True)
  print("Valid Images")
  transformdata(val, imagefold, antfold, valout)

  testout = os.path.join(outfold, 'test')
  os.makedirs(testout, exist_ok=True)
  print("Test Images")
  transformdata(test, imagefold, antfold, testout)
    

augment(imagefold, antfold, outfold)

'''