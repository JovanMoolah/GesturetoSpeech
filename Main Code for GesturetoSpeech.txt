
import ultralytics

import supervision as sv

import cv2

import random

from ultralytics import YOLO

from roboflow import Roboflow

from matplotlib import pyplot as plt

import albumentations as A

import numpy as np

import torch

import os

from sklearn.model_selection import train_test_split

from tqdm import tqdm

import pyttsx3

from itertools import groupby

import argostranslate.package

import argostranslate.translate





'''


global CLO 
CLO = '0'

def pred ():

    
    TEMP = []
    #TEMP.clear()
    
    LIST = []
    
    CLOSE = []
    #LIST.clear()

    #model = YOLO('best1.pt') # load the trained model

    model = YOLO('runs/pose/train15/weights/best.pt') # load the trained model


    #video_cap = cv2.VideoCapture(results)


    #video_cap.release()
    #cv2.destroyAllWindows()



    
                
    #results = model (source = 0,   show = True, show_labels=True, show_conf = True, conf = 0.8, save =True)
    #names = model.names
  
    
    
    
    # Capture from your default camera (just as an example)
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()

        # Make predictions
        results = model.predict(frame, conf = 0.6, show=True)
        names = model.names
       
       
        for r in results:
             
            # r.save_txt("output.txt")
             for box in r.boxes.cls:
                
              
                
                c = (names[int(box)]) 
                if (c == "space"):
                    c = " "  
                if (c == '7'):
                      global CLO 
                      CLO = 'CLOSEWIN'
                
                TEMP.append (c)
               
               

                #print ('a')
             #if CLO ='CLOSEWIN' 
               
         
      
            # Display the frame with detections

        #if cv2.waitKey(1) & 0xFF == ord('q') :
                    #break
     
           
        wait = cv2.waitKey(1)
     
        wait = CLO
        if wait == 'CLOSEWIN':
             break
   
                    
             #print (key[1])
             #cv2.waitKey(1)

             #print(key)
             #if key[0] == 'y':  # close on ESC ke 
                 #  break  
                         
    cap.release()
    cv2.destroyAllWindows()

    
    for nme, cnt in groupby(TEMP):
              LIST.append((nme, len(list(cnt))))
   
 
    TUP = []
    for i, (a, b) in enumerate (LIST):    
         
        #if a in LIST [i] == '5' and 5 < b in LIST [i] < 50 : 
           # a == 'test'
           # TUP.append (a)  
            
        cur_a, cur_b = LIST [i]   
        prev_a, prev_b = LIST [i-1]
        prev2_a, prev2_b = LIST [i-2]
        prev3_a, prev3_b = LIST [i-3]
        #prev4_a, prev4_b = LIST [i-4]
        if (cur_a == '5' and 5 < cur_b < 20) and ((prev_a == '4' and 5 < prev_b < 20) or (prev2_a == '4' and 5 < prev2_b < 20)) and ((prev2_a == '3' and 5 < prev2_b < 20) or (prev3_a == '3' and 5 < prev3_b < 20)) : 
            cur_a = 'j'  
            TUP.append (cur_a)
            
        elif cur_b > 20:         
            TUP.append(cur_a)
    
            
    TUP2 = []
    for i, item in enumerate (TUP):  #
        if TUP [i] == 'o' and (TUP [i-1] == '0' or TUP [i-1] == '1' or TUP [i-1] ==  '2' or TUP [i-1] ==  '3' or TUP [i-1] == '4' or TUP [i-1] == '5' or TUP [i-1] == '6' or TUP [i-1] == '7' or TUP [i-1] == '8' or TUP [i-1] ==  '9'):
            item = '0'   
            #if TUP[i] == '0' and TUP [i-1] == '0': 
                 #item == '0'
        TUP2.append (item)
            
    TUP3 = []
    for i, item in enumerate (TUP2):
        if TUP2 [i] == 'o' and TUP2 [i-1] == '0':
            item = '0' 
        TUP3.append (item)
    
    

    SECOND = ''.join(TUP3)
   
       
    with open ('OTEMP.txt', 'w') as f:
             for line in TEMP:
                  f.write(f"{line}")

    with open ('OFIRST.txt', 'w') as f:
             for line in LIST:
                 f.write(f"{line}")
    
    with open ('OLIST.txt', 'w') as f:
                 f.write(SECOND)            
                
    

    
    Translate = argostranslate.translate.translate(SECOND, "en", "fr")
    
    with open ('OTranslate.txt', 'w') as f:
                 f.write(Translate)
    
    
    
    engine = pyttsx3.init() # object creation
    
    engine.setProperty('rate', 75)     # setting up new voice rate
    
    engine.setProperty('volume',1.0)    # setting up volume level  between 0 and 1
    

    sp_voice = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_ES-ES_HELENA_11.0"
    en_voice = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_EN-US_ZIRA_11.0"
    mx_voice = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_ES-MX_SABINA_11.0"
    fr_voice_id = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_FR-FR_HORTENSE_11.0"
    gm_voice_id = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_DE-DE_HEDDA_11.0"
    
    
    engine.setProperty('voice', en_voice)
    file = open("OLIST.txt", "r") 
    #print (file.read())
    engine.say(file.read())
    engine.runAndWait()
    engine.stop()
    
    
    engine.setProperty('voice', fr_voice_id)
    file = open("OTranslate.txt", "r") 
    #print (file.read())
    engine.say(file.read())
    engine.runAndWait()
    engine.stop()
    

    #TEMP.clear()
    #LIST.clear()
    
    CLO = '0' 
    
    pred ()
    
    
pred()



'''
